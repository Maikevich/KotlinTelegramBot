Метод equals() - определяет отношение эквивалентности объектов.
При сравнение объектов с помощью == сравнение происходит лишь между ссылками. При 
сравнении по переопределённому разработчиком equals() - по внутреннему состоянию объектов.
Какими свойствами обладает порождаемое equals() отношение эквивалентности?
● Рефлексивность: для любой ссылки на значение x, x.equals(x) вернет true;
● Симметричность: для любых ссылок на значения x и y, x.equals(y) должно вернуть true, тогда 
и только тогда, когда y.equals(x) возвращает true.
● Транзитивность: для любых ссылок на значения x, y и z, если x.equals(y) и y.equals(z)
возвращают true, тогда и x.equals(z) вернёт true;
● Непротиворечивость: для любых ссылок на значения х и у, если несколько раз вызвать 
х.equals(y), постоянно будет возвращаться значение true либо постоянно будет возвращаться 
значение false при условии, что никакая информация, используемая при сравнении объектов, не 
поменялась.
Для любой ненулевой ссылки на значение х выражение х.equals(null) должно возвращать false.
Метод hashCode() необходим для вычисления хэш кода переданного в качестве входного 
параметра объекта. В Java это целое число, в более широком смысле - битовая строка 
фиксированной длины, полученная из массива произвольной длины. Этот метод реализован таким 
образом, что для одного и того же входного объекта, хэш код всегда будет одинаковым. Следует 
понимать, что в Java множество возможных хэш кодов ограничено типом int, а множество объектов 
ничем не ограничено. Из-за этого, вполне возможна ситуация, что хэш коды разных объектов могут 
совпасть:
-если хэш коды разные, то и объекты гарантированно разные;
-если хэш коды равны, то объекты могут не обязательно равны.
- для одного и того-же объекта, хеш-код всегда будет одинаковым; 
- если объекты одинаковые, то и хеш-коды одинаковые (но не наоборот).
Общий совет: выбирать поля, которые с большой долью вероятности будут различаться. Для 
этого необходимо использовать уникальные, лучше всего примитивные поля, например такие как 
id, uuid. При этом нужно следовать правилу, если поля задействованы при вычислении hashCode(), 
то они должны быть задействованы и при выполнении equals().