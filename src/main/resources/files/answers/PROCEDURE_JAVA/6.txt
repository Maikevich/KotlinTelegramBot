Каждое выражение и каждая переменная имеет строго определенный тип уже на момент 
компиляции. Механизм приведения типов (casting) - способ преобразования значения переменной 
одного типа в значение другого типа:
Неявные – выполняются автоматически (расширяющие преобразования, сужающие с потерей 
данных: int->float, long->float, long->double).
byte b = 7;
int d = b; // преобразование от byte к int
Явные – надо указывать тип (сужающие преобразования от типа с большей разрядностью к 
типу с меньшей разрядностью). Потеря данных (старшие биты будут потеряны).
int a = 5;
byte b = (byte) a;
System.out.println(b); // 5
int a = 258;
byte b = (byte) a;
System.out.println(b); // 2
double a = 56.9898;
int b = (int)a; // 56
N	невозможность
Y автоматически
С	сужающее	преобразование,	требующее	явного	приведения
Y* автоматическое расширяющее преобразование, в процессе которого значение может потерять 
некоторые из наименее значимых разрядов
Разновидности приведения:
- Тождественное (identity). Преобразование выражения любого типа к точно такому же типу 
всегда допустимо и происходит автоматически.
- Расширение (повышение, upcasting) примитивного типа (widening primitive). Означает, что 
осуществляется переход от менее емкого типа к более ёмкому. Например, от типа byte (длина 1 
байт) к типу int (длина 4 байта). Такие преобразование безопасны в том смысле, что новый тип 
всегда гарантировано вмещает в себя все данные, которые хранились в старом типе и таким 
образом не происходит потери данных. Этот тип приведения всегда допустим и происходит 
автоматически.
- Сужение (понижение, downcasting) примитивного типа (narrowing primitive). Означает, что 
переход осуществляется от более емкого типа к менее емкому. При таком преобразовании есть 
риск потерять данные. Например, если число типа int было больше 127, то при приведении его к 
byte значения битов старше восьмого будут потеряны. В Java такое преобразование должно 
совершаться явным образом, при этом все старшие биты, не умещающиеся в новом типе, просто 
отбрасываются - никакого округления или других действий для получения более корректного 
результата не производится.
- Расширение объектного типа (widening reference). Означает неявное восходящее приведение 
типов или переход от более конкретного типа к менее конкретному, т.е. переход от потомка к
предку. Разрешено всегда и происходит автоматически.
- Сужение объектного типа (narrowing reference). Означает нисходящее приведение, то есть 
приведение от предка к потомку (подтипу). Возможно только если исходная переменная является 
подтипом приводимого типа. При несоответствии типов в момент выполнения выбрасывается 
исключение ClassCastException. Требует явного указания типа.
- Преобразование к строке (to String). Любой тип может быть приведен к строке, т.е. к 
экземпляру класса String.
- Запрещенные преобразования (forbidden). Не все приведения между произвольными типами 
допустимы. Например, к запрещенным преобразованиям относятся приведения от любого 
ссылочного типа к примитивному и наоборот (кроме преобразования к строке). Кроме того 
невозможно привести друг к другу классы находящиеся на разных ветвях дерева наследования и 
т.п.
При приведении ссылочных типов с самим объектом ничего не происходит, - меняется лишь 
тип ссылки, через которую происходит обращение к объекту.
Для проверки возможности приведения нужно воспользоваться оператором instanceof:
Parent parent = new Child();
if (parent instanceof Child) {
 Child child = (Child) parent;
}