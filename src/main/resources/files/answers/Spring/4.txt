@Bean - Это аннотация Spring Framework, она используется над методом для указания 
того, что данный метод создает, настраивает и инициализирует новый объект, управляемый 
Spring IoC контейнером. Такие методы можно использовать как в классах с аннотацией 
@Configuration, так и в классах с аннотацией @Component (или её наследниках).
Позволяет дополнительно определить у бина:
❖ name - имя (уникальный идентификатор) бина;
❖ initMethod - имя метода для вызова во время инициализации бина;
❖ destroyMethod - имя метода для вызова во время удаления бина из контекста;
❖ autowireCandidate - является ли этот бин кандидатом на автоматическое внедрение в 
другой бин.
Классы, аннотированные @Configuration, проксируются через CGLIB. Классы 
@Component или обычные классы не проксируются и не перехватывают вызовы методов с 
аннотациями @Bean, что означает, что вызовы не будут маршрутизироваться через контейнер 
и каждый раз будет возвращаться новый экземпляр бина.
Также методы бинов, вызывая друг друга в таких классах, не будут создавать бины, а 
будет просто выполняться код метода, ведь в данном случае они отработают не через прокси.
CGLIB (Code Generation Library) - Это библиотека инструментария байтов, используемая 
во многих средах Java, таких как Hibernate или Spring. Инструментарий байт-кода позволяет 
манипулировать или создавать классы после фазы компиляции программы.
Hibernate использует cglib для генерации динамических прокси. Например, он не вернет 
полный объект, хранящийся в базе данных, но вернет инструментальную версию хранимого 
класса, которая лениво загружает значения из базы данных по требованию. 
Прокси — это шаблон проектирования. Создаем и используем его для добавления и 
изменения функционала уже существующих классов. В таком случае, прокси-объект 
применяется вместо исходного. Обычно он использует тот же метод, что и оригинальный, и в 
Java прокси-классы расширяют исходные.
Имена бинов
Имя бина, которое в контейнере является одновременно и его уникальным 
идентификатором, по умолчанию соответствует имени метода, аннотированного @Bean. Но 
если требуется указать иное имя, то можно использовать атрибут name, который принимает 
String. Однако, атрибут name также может принимать массив String, что позволяет использовать 
несколько имен. Первый элемент массива будет являться именем и уникальным 
идентификатором бина, а остальные будут его псевдонимами.
@Bean({"b1", "b2"}) // bean available as 'b1' and 'b2', but not 'myBean'
public MyBean myBean() {
 // instantiate and configure MyBean obj
 return obj;
}
