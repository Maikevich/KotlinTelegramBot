Это аннотация Spring Framework, ею мы помечаем класс, если хотим, чтобы из этого 
класса был создан бин. Именно эту аннотацию ищет Spring Framework, когда сканирует наши 
классы. Можно указать имя (Id) для создаваемого бина, а можно не указывать, тогда по 
умолчанию именем будет название класса с маленькой буквы.
Аннотация @Component имеет наследников: @Repository, @Service и @Controller. Все 
они являются частными случаями использования @Component для слоёв DAO, сервиса и 
контроллера MVC соответственно. Также эти аннотации могут иметь дополнительный смысл в 
будущих версиях Spring Framework. В остальных же случаях достаточно использовать аннотацию 
@Component.
Итог:
❖ @Component - Spring определяет этот класс как кандидата для создания bean.
❖ @Service - класс содержит бизнес-логику и вызывает методы на уровне хранилища. 
Ничем не отличается от классов с @Component.
❖ @Repository - указывает, что класс выполняет роль хранилища (объект доступа к DAO). 
Задача @Repository заключается в том, чтобы отлавливать определенные исключения 
персистентности и пробрасывать их как одно непроверенное исключение Spring 
Framework. Для этого Spring оборачивает эти классы в прокси, и в контекст должен быть 
добавлен класс PersistenceExceptionTranslationPostProcessor.
❖ @Controller - указывает, что класс выполняет роль контроллера MVC. DispatcherServlet 
просматривает такие классы для поиска @RequestMapping.
@RequestMapping используется для мапинга (связывания) с URL для всего класса или для 
конкретного метода обработчика.
