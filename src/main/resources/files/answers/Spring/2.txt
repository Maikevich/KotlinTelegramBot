IoC Container
В Spring Framework контейнер отвечает за создание, настройку и сборку объектов, 
известных как бины, а также за управление их жизненным циклом. Он (контейнер) представлен 
интерфейсом ApplicationContext.
Spring Framework предоставляет несколько реализаций интерфейса ApplicationContext:
❖ ClassPathXmlApplicationContext и FileSystemXmlApplicationContext - для автономных
приложений;
❖ WebApplicationContext - для веб-приложений;
❖ AnnotationConfigApplicationContext - для обычной Java-конфигурации, в качестве 
аргумента которому передается класс, либо список классов с аннотацией 
@Configuration, либо с любой другой аннотацией JSR-330, в том числе и @Component.
Контейнер получает инструкции о том, какие объекты создавать, настраивать и 
собирать, через метаданные конфигурации, которые представлены в виде XML, Java-аннотаций 
или Java-кода:
❖ XML - Метаданные считываются из файла с расширением *.xml;
❖ Java-аннотации - В Spring 2.5 появилась поддержка метаданных конфигурации на основе 
аннотаций, которая использует данные байт-кода для подключения компонентов. 
Вместо того, чтобы использовать XML-файл для описания связывания компонентов, 
разработчик перемещает конфигурацию в сам класс компонента, используя аннотации 
к соответствующему классу, методу или полю. При этом, сам XML-файл с базовыми 
настройками остаётся. Контейнер считывает аннотации перед считыванием XML, 
поэтому, если бин конфигурируется и через аннотации и через XML-файл, то настройки 
XML переопределят настройки аннотаций.
❖ Java-код - Начиная со Spring 3.0, используя Java-код, а не файлы XML, мы можем 
определять настройки в специальном классе, помеченном аннотацией @Configuration. 
Появились аннотации @Configuration, @Bean, @Import и @DependsOn и т.д.
